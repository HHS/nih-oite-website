---
http_interactions:
- request:
    method: get
    uri: https://oitecareersblog.od.nih.gov/feed/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.3.0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 31 May 2022 21:37:57 GMT
      Server:
      - Apache
      Link:
      - <https://oitecareersblog.od.nih.gov/wp-json/>; rel="https://api.w.org/"
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Last-Modified:
      - Wed, 25 May 2022 21:28:20 GMT
      Etag:
      - '"1e6ce975ce656560aa2e7e00cfffbfbf:dtagent10237220328075400Yqtr"'
      Server-Timing:
      - dtSInfo;desc="0", dtRpid;desc="1992107262"
      Set-Cookie:
      - dtCookie=v_4_srv_2_sn_CABB31DDD398B07F320B47BC3A31BDF1_perc_100000_ol_0_mul_1_app-3A0469da45c4d06a52_1;
        Path=/; Domain=.nih.gov
      Transfer-Encoding:
      - chunked
      Content-Type:
      - application/rss+xml; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 31 May 2022 21:37:58 GMT
recorded_with: VCR 6.1.0
